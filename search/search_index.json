{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Inventory management (or cmdb) service for multiple teams.</p> <p>Also can announce new/changes to Rocket.Chat</p> <p>REST API for automatic management is on the agenda but not finished</p> <p>Very early version but working software.</p> <p>Author: https://github.com/henrik-andreasson/</p> <p>Heavily based on the excellent tutorial  Flask Mega Tutorial by Miguel Grinberg.</p> <p>Big Thanks to Miguel!</p> <p>Github Repository</p>"},{"location":"database/","title":"clean database","text":"<ul> <li>mv app.db demo.db</li> <li>flask db init</li> <li>flask db migrate -m baseline</li> <li>flask db upgrade</li> <li>flask user new admin foo123 admin@example.com</li> </ul>"},{"location":"demo/","title":"demo","text":"<p>login with:</p> <pre><code>user: admin\npass: admin\n</code></pre> <p>inventorpy demo</p>"},{"location":"getting-started/","title":"Getting started","text":"<ol> <li>Start as described above.</li> <li>Register first user (currently there is no admin, all users can to everything, but everything is logged through audit log)</li> <li>Optionally turn off Open registration (then an existing user must create new users)</li> <li>First create the objects used by lots of other objects</li> </ol> <ul> <li>Services</li> <li>Locations</li> <li>Racks</li> <li>Network</li> </ul> <ol> <li>Now regular object can be creates, such as:</li> </ol> <ul> <li>servers</li> <li>firewalls</li> <li>switches</li> </ul> <ol> <li>Optionally create physical security objects:</li> </ol> <ul> <li>Safe</li> <li>Compartment (locked box dedicated to one person inside a safe)</li> </ul> <ol> <li>Hardware Security Modules (HSMs)</li> </ol> <ul> <li>HSM Domain a virtual object but all other objects belong to one of these</li> <li>HSM PCI Card</li> <li>HSM Backup Unit</li> <li>HSM PED Key</li> <li>HSM PIN</li> </ul>"},{"location":"modules/","title":"Modules in inventorpy","text":""},{"location":"modules/#server","title":"server","text":""},{"location":"modules/#main-service-location-user-and-audit","title":"main - service, location, user and audit","text":"<p>service</p> <p></p> <p>location</p> <p></p> <p>user</p> <p></p>"},{"location":"modules/#network","title":"network","text":""},{"location":"modules/#switch-port","title":"switch / port","text":"<p>switch</p> <p></p> <p>switch port</p> <p></p>"},{"location":"modules/#firewall-port","title":"firewall / port","text":"<p>fireall</p> <p></p> <p>firewall port</p> <p></p>"},{"location":"modules/#rack","title":"rack","text":""},{"location":"modules/#safe-compartment","title":"safe / compartment","text":"<p>safe</p> <p></p> <p>compartment</p> <p></p>"},{"location":"modules/#hsm","title":"HSM","text":"<p>HSM Domain</p> <p></p> <p>HSM PCI Card</p> <p></p> <p>HSM Backup Unit</p> <p></p> <p>HSM PED</p> <p></p> <p>HSM PIN</p> <p></p>"},{"location":"overview/","title":"intro","text":""},{"location":"overview/#first-page-month-view","title":"first page / month view","text":""},{"location":"overview/#on-call","title":"On call","text":""},{"location":"overview/#stats","title":"stats","text":""},{"location":"overview/#non-working-days","title":"Non Working days","text":""},{"location":"overview/#absence","title":"absence","text":""},{"location":"rest-api/","title":"REST API","text":"<p>to use the REST API there is new login step, get a jwt token first</p> <pre><code>token=$(http --verify cacerts.pem --auth \"$username:$password\" POST \"${apiserverurl}/tokens\" | jq \".token\" | sed 's/\\\"//g')\n</code></pre> <p>then you can create a new service:</p> <pre><code>http --verify cacerts.pem --verbose POST \"${API_URL}/service\" \\\n  \"name=${name}\" \\\n  \"color=${color}\" \\\n  \"Authorization:Bearer $token\"\n</code></pre> <p>to help with getting started with the REST API there are scripts for all API:s in utils/</p>"},{"location":"running/","title":"Running","text":""},{"location":"running/#running-on-centos","title":"Running on CentOS","text":"<p>Install python3 and sqlite</p> <pre><code>yum install -y python3 sqlite\n</code></pre> <p>Used modules</p> <pre><code>pip3 install flask-sqlalchemy flask-migrate flask-login flask-mail \\\n  flask-bootstrap flask-moment flask-babel jwt flask-wtf \\\n  WTForms-Components flask-httpauth rocketchat_API\n</code></pre> <p>install source</p> <pre><code>mkdir /opt/inventorpy\ncd /opt/inventorpy\nunzip inventorpy-x.y.z.zip\n</code></pre> <p>start</p> <pre><code>export FLASK_APP=inventorpy.py\ncd /opt/inventorpy\nflask run --host=0.0.0.0\n</code></pre> <p>See also the systemd service file inventorpy.service to run with gunicorn</p>"},{"location":"running/#running-in-docker","title":"Running in Docker","text":"<p>build docker:</p> <pre><code>docker build -t inventorpy  .\n</code></pre> <p>Run the app</p> <pre><code>docker run -it -p8080:8080 inventorpy\n</code></pre> <p>Developer mode, ie mount the current directory into the docker container and have it self reload when python files are written</p> <pre><code>docker run -p5000:5000 -it  --mount type=bind,source=\"$(pwd)\",target=/inventorpy inventorpy flask run --host=0.0.0.0 --reload\n</code></pre>"}]}