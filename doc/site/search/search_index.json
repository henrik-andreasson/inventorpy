{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About \u00b6 Inventory management (or cmdb) service for multiple teams. Also can announce new/changes to Rocket.Chat REST API for automatic management is on the agenda but not finished Very early version but working software. Author: https://github.com/henrik-andreasson/ Heavily based on the excellent tutorial Flask Mega Tutorial by Miguel Grinberg. Big Thanks to Miguel! Github Repository","title":"Home"},{"location":"#about","text":"Inventory management (or cmdb) service for multiple teams. Also can announce new/changes to Rocket.Chat REST API for automatic management is on the agenda but not finished Very early version but working software. Author: https://github.com/henrik-andreasson/ Heavily based on the excellent tutorial Flask Mega Tutorial by Miguel Grinberg. Big Thanks to Miguel! Github Repository","title":"About"},{"location":"demo/","text":"demo \u00b6 login with: user : admin pass : foo123 inventorpy demo","title":"Demo"},{"location":"demo/#demo","text":"login with: user : admin pass : foo123 inventorpy demo","title":"demo"},{"location":"getting-started/","text":"Modules in inventorpy \u00b6 server \u00b6 main - service, location, user and audit \u00b6 service location user network \u00b6 switch / port \u00b6 switch switch port firewall / port \u00b6 fireall firewall port rack \u00b6 safe / compartment \u00b6 safe compartment HSM \u00b6 HSM Domain HSM PCI Card HSM Backup Unit HSM PED HSM PIN","title":"Getting Started"},{"location":"getting-started/#modules-in-inventorpy","text":"","title":"Modules in inventorpy"},{"location":"getting-started/#server","text":"","title":"server"},{"location":"getting-started/#main-service-location-user-and-audit","text":"service location user","title":"main - service, location, user and audit"},{"location":"getting-started/#network","text":"","title":"network"},{"location":"getting-started/#switch-port","text":"switch switch port","title":"switch / port"},{"location":"getting-started/#firewall-port","text":"fireall firewall port","title":"firewall / port"},{"location":"getting-started/#rack","text":"","title":"rack"},{"location":"getting-started/#safe-compartment","text":"safe compartment","title":"safe / compartment"},{"location":"getting-started/#hsm","text":"HSM Domain HSM PCI Card HSM Backup Unit HSM PED HSM PIN","title":"HSM"},{"location":"moduled/","text":"REST API \u00b6 to use the REST API there is new login step, get a jwt token first token=$(http --verify cacerts.pem --auth \" $username : $password \" POST \" ${ apiserverurl } /tokens\" | jq \".token\" | sed 's/\\\"//g') then you can create a new service: http --verify cacerts.pem --verbose POST \" ${ API_URL } /service\" \\ \"name= ${ name } \" \\ \"color= ${ color } \" \\ \"Authorization:Bearer $token \" to help with getting started with the REST API there are scripts for all API:s in utils/","title":"Modules"},{"location":"moduled/#rest-api","text":"to use the REST API there is new login step, get a jwt token first token=$(http --verify cacerts.pem --auth \" $username : $password \" POST \" ${ apiserverurl } /tokens\" | jq \".token\" | sed 's/\\\"//g') then you can create a new service: http --verify cacerts.pem --verbose POST \" ${ API_URL } /service\" \\ \"name= ${ name } \" \\ \"color= ${ color } \" \\ \"Authorization:Bearer $token \" to help with getting started with the REST API there are scripts for all API:s in utils/","title":"REST API"},{"location":"rest-api/","text":"REST API \u00b6 to use the REST API there is new login step, get a jwt token first token=$(http --verify cacerts.pem --auth \" $username : $password \" POST \" ${ apiserverurl } /tokens\" | jq \".token\" | sed 's/\\\"//g') then you can create a new service: http --verify cacerts.pem --verbose POST \" ${ API_URL } /service\" \\ \"name= ${ name } \" \\ \"color= ${ color } \" \\ \"Authorization:Bearer $token \" to help with getting started with the REST API there are scripts for all API:s in utils/","title":"REST API"},{"location":"rest-api/#rest-api","text":"to use the REST API there is new login step, get a jwt token first token=$(http --verify cacerts.pem --auth \" $username : $password \" POST \" ${ apiserverurl } /tokens\" | jq \".token\" | sed 's/\\\"//g') then you can create a new service: http --verify cacerts.pem --verbose POST \" ${ API_URL } /service\" \\ \"name= ${ name } \" \\ \"color= ${ color } \" \\ \"Authorization:Bearer $token \" to help with getting started with the REST API there are scripts for all API:s in utils/","title":"REST API"},{"location":"running/","text":"Getting started \u00b6 Start as described above. Register first user (currently there is no admin, all users can to everything, but everything is logged through audit log) Optionally turn off Open registration (then an existing user must create new users) First create the objects used by lots of other objects Services Locations Racks Network Now regular object can be creates, such as: servers firewalls switches Optionally create physical security objects: Safe Compartment (locked box dedicated to one person inside a safe) Hardware Security Modules (HSMs) HSM Domain a virtual object but all other objects belong to one of these HSM PCI Card HSM Backup Unit HSM PED Key HSM PIN turn off open registration \u00b6 Inventorpy needs to be configured whether to allow open registration. The default is in config.py and the setting can be changed via environment variables. Eg, in bash: export OPEN_REGISTRATION = \"False\" All config \u00b6 SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess' SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\ 'sqlite:///' + os.path.join(basedir, 'app.db') SQLALCHEMY_TRACK_MODIFICATIONS = False MAIL_SERVER = os.environ.get('MAIL_SERVER') MAIL_PORT = int(os.environ.get('MAIL_PORT') or 25) MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS') is not None MAIL_USERNAME = os.environ.get('MAIL_USERNAME') MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD') ADMINS = ['your-email@example.com'] POSTS_PER_PAGE = 25 ROCKET_ENABLED = os.environ.get('ROCKET_ENABLED') or False ROCKET_USER = os.environ.get('ROCKET_USER') or 'inventory' ROCKET_PASS = os.environ.get('ROCKET_PASS') or 'foo123' ROCKET_URL = os.environ.get('ROCKET_URL') or 'http://172.17.0.4:3000' ROCKET_CHANNEL = os.environ.get('ROCKET_CHANNEL') or 'general' OPEN_REGISTRATION = os.environ.get('OPEN_REGISTRATION') or True INVENTORPY_TZ = os.environ.get('TEAMPLAN_TZ') or \"Europe/Stockholm\"","title":"Running"},{"location":"running/#getting-started","text":"Start as described above. Register first user (currently there is no admin, all users can to everything, but everything is logged through audit log) Optionally turn off Open registration (then an existing user must create new users) First create the objects used by lots of other objects Services Locations Racks Network Now regular object can be creates, such as: servers firewalls switches Optionally create physical security objects: Safe Compartment (locked box dedicated to one person inside a safe) Hardware Security Modules (HSMs) HSM Domain a virtual object but all other objects belong to one of these HSM PCI Card HSM Backup Unit HSM PED Key HSM PIN","title":"Getting started"},{"location":"running/#turn-off-open-registration","text":"Inventorpy needs to be configured whether to allow open registration. The default is in config.py and the setting can be changed via environment variables. Eg, in bash: export OPEN_REGISTRATION = \"False\"","title":"turn off open registration"},{"location":"running/#all-config","text":"SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess' SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\ 'sqlite:///' + os.path.join(basedir, 'app.db') SQLALCHEMY_TRACK_MODIFICATIONS = False MAIL_SERVER = os.environ.get('MAIL_SERVER') MAIL_PORT = int(os.environ.get('MAIL_PORT') or 25) MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS') is not None MAIL_USERNAME = os.environ.get('MAIL_USERNAME') MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD') ADMINS = ['your-email@example.com'] POSTS_PER_PAGE = 25 ROCKET_ENABLED = os.environ.get('ROCKET_ENABLED') or False ROCKET_USER = os.environ.get('ROCKET_USER') or 'inventory' ROCKET_PASS = os.environ.get('ROCKET_PASS') or 'foo123' ROCKET_URL = os.environ.get('ROCKET_URL') or 'http://172.17.0.4:3000' ROCKET_CHANNEL = os.environ.get('ROCKET_CHANNEL') or 'general' OPEN_REGISTRATION = os.environ.get('OPEN_REGISTRATION') or True INVENTORPY_TZ = os.environ.get('TEAMPLAN_TZ') or \"Europe/Stockholm\"","title":"All config"}]}